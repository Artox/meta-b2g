# HG changeset patch
# Date 1359974800 -3600
# User Philipp Wagner <mail@philipp-wagner.com>
# Parent db7579683f29d9d8a84b257f23a856a32bde55f7
Bug 731498 - LinuxGL port

diff --git a/widget/linuxgl/nsWindow.cpp b/widget/linuxgl/nsWindow.cpp
--- a/widget/linuxgl/nsWindow.cpp
+++ b/widget/linuxgl/nsWindow.cpp
@@ -71,16 +71,53 @@ static void *gNativeWindow = nullptr;
 static bool sFramebufferOpen;
 static bool sUsingOMTC;
 static bool sUsingHwc;
 static bool sScreenInitialized;
 static nsRefPtr<gfxASurface> sOMTCSurface;
 static pthread_t sFramebufferWatchThread;
 static bool sMayCreateNativeWindow = false;
 
+#include <sys/time.h>
+class MozFPSCounter
+{
+public:
+   MozFPSCounter(const char* aEnv = NULL, const char* aMsg = NULL, int aFreq = 5)
+     : mEnv(aEnv), mMsg(aMsg), mFreq(aFreq), mFpsCounter(0), mEnabled(true)
+   {
+     if (mEnv) {
+       char* envVal = getenv(mEnv);
+       if (!envVal) { mEnabled = false; }
+       if (envVal && *envVal) { mFreq = atoi(envVal); }
+     }
+   }
+   void Count(void) {
+     if (!mEnabled) return;
+     if (!mFpsCounter) { gettimeofday(&mPrevTime, NULL); }
+     mFpsCounter++;
+     if (mFpsCounter > mFreq) {
+       gettimeofday(&mCurrTime, NULL);
+       timersub(&mCurrTime, &mPrevTime, &mDiffTime);
+       float time = mFpsCounter / (mDiffTime.tv_sec + (float)mDiffTime.tv_usec/1000000);
+       printf("%s: time:%ld.%06ld fps:%g\n", mMsg, mDiffTime.tv_sec, mDiffTime.tv_usec, time);
+       mFpsCounter = 0;
+     }
+   }
+   virtual ~MozFPSCounter() {};
+private:
+    const char* mEnv;
+    const char* mMsg;
+    int mFreq;
+    int mFpsCounter;
+    bool mEnabled;
+    struct timeval mDiffTime;
+    struct timeval mCurrTime;
+    struct timeval mPrevTime;
+};
+
 namespace {
 
 #ifdef MOZ_X11
 typedef struct xinfo_t
 {
   Display *dpy;
   Window win;
   GC gc;
@@ -314,16 +351,18 @@ nsWindow::DoDraw(void)
 
         if (!sUsingOMTC) {
             targetSurface->Flush();
             Framebuffer::Present(region);
         }
     } else {
         NS_RUNTIMEABORT("Unexpected layer manager type");
     }
+    static MozFPSCounter counter("SHOW_FPS", "FPS RATE", 30);
+    counter.Count();
 }
 
 nsEventStatus
 nsWindow::DispatchInputEvent(nsGUIEvent &aEvent, bool* aWasCaptured)
 {
     if (aWasCaptured) {
         *aWasCaptured = false;
     }
